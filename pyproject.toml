[project]
name = "ingenious"
version = "0.2.2"
description = "An enterprise-grade Python library for quickly setting up APIs to interact with AI Agents"
readme = "README.md"
license = { text = "MIT" }
authors = [
  { name = "John Rampono", email = "john.rampono@insight.com" },
  { name = "Kokko Ng", email = "kokko.ng@insight.com" },
  { name = "Elliot Zhu", email = "elliot.zhu@insight.com" },
]
keywords = ["agent", "autogen", "fastapi", "azure"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.13"
# Minimal core dependencies - essential for basic library functionality
dependencies = [
  "aiofiles>=24.1.0",
  "autogen-agentchat>=0.5.7",
  "autogen-ext>=0.5.7",
  "azure-cosmos>=4.9.0",
  "azure-identity>=1.17.1",
  "azure-keyvault-secrets>=4.10.0",
  "azure-search-documents>=11.5.2",
  "azure-storage-blob>=12.25.1",
  "chromadb>=1.0.11",
  "dependency-injector==4.48.1",
  "fastapi==0.115.9",
  "flask>=3.1.1",
  "jsonpickle==4.1.1",
  "markdown>=3.8.2",
  "openai>=1.82.0",
  "pandas>=2.3.1",
  "passlib>=1.7.4",
  "psutil>=7.0.0",
  "pydantic==2.11.5",
  "pydantic-settings>=2.10.1",
  "pyodbc>=5.2.0",
  "python-dotenv>=1.0.1",
  "python-jose>=3.5.0",
  "structlog==25.4.0",
  "tiktoken>=0.9.0",
  "typer==0.16.0",
  "uvicorn>=0.35.0",
]

[project.urls]
Homepage = "https://github.com/Insight-Services-APAC/ingenious"
Documentation = "https://insight-services-apac.github.io/ingenious/"
Repository = "https://github.com/Insight-Services-APAC/ingenious"
Issues = "https://github.com/Insight-Services-APAC/ingenious/issues"

[dependency-groups]
dev = [
  "httpx>=0.28.1",
  "jsonpickle>=4.1.1",
  "mypy>=1.16.1",
  "pip-audit>=2.9.0",
  "pre-commit>=4.2.0",
  "pytest>=8.3.5",
  "pytest-asyncio>=0.26.0",
  "pytest-cov>=6.1.1",
  "pytest-mock>=3.14.0",
  "pytest-timeout>=2.4.0",
  "ruff>=0.11.10",
  "twine>=6.0.0",
  "types-markdown>=3.8.0.20250708",
  "types-psutil>=7.0.0.20250601",
  "types-pyyaml>=6.0.12.20250516",
  "types-requests>=2.32.4.20250611",
  "vulture>=2.14",
]

[project.optional-dependencies]
# Minimal installation - basic API functionality only
minimal = []

test = [
  "httpx==0.28.1",
  "jsonpickle==4.1.1",
  "mypy==1.16.1",
  "pip-audit==2.9.0",
  "pre-commit==4.2.0",
  "pytest==8.3.5",
  "pytest-asyncio==0.26.0",
  "pytest-cov==6.1.1",
  "pytest-mock==3.14.0",
  "pytest-timeout==2.4.0",
  "ruff==0.11.10",
  "twine==6.0.0",
  "types-markdown==3.8.0.20250708",
  "types-psutil==7.0.0.20250601",
  "types-pyyaml==6.0.12.20250516",
  "types-requests==2.32.4.20250611",
  "vulture==2.14",
  "reportlab==4.4.2",
  "hypothesis==6.136.2"
]

# Core features - common production functionality
core = [
  "aiosqlite==0.21.0",
  "fastapi-cli==0.0.7",
  "jinja2==3.1.6",
  "python-dotenv==1.0.1",
]

# Authentication and security features
auth = ["bcrypt==4.3.0", "passlib==1.7.4", "python-jose[cryptography]==3.5.0"]

# Azure cloud integrations
azure = [
  "azure-core==1.34.0",
  "azure-cosmos==4.9.0",
  "azure-identity==1.17.1",
  "azure-keyvault==4.2.0",
  "azure-search-documents==11.5.2",
  "azure-storage-blob==12.25.1",
]

# AI and agent functionality
ai = [
  "autogen-agentchat==0.5.7",
  "autogen-ext[openai]==0.5.7",
  "openai==1.82.0",
]

# Database connectivity
database = ["pyodbc==5.2.0", "psutil==7.0.0"]

# Web UI
ui = ["flask==3.1.1"]

# Document processing capabilities
document-processing = [
  "pymupdf==1.26.1",
  "azure-ai-documentintelligence==1.0.2",
  "psutil==7.0.0",
]

# Advanced document processing
document-advanced = ["pdfminer.six==20250506", "unstructured[all-docs]==0.17.2"]

chunk = [
  "jsonlines==3.1.0",
  "langchain-experimental==0.3.4",
  "langchain-openai==0.3.0",
  "langchain-text-splitters==0.3.0",
  "regex==2024.11.6",
  "xxhash==3.5.0",
  "ijson==3.2.3",
]

# ML and embeddings
ml = ["chromadb==1.0.11", "sentence-transformers==5.0.0"]

# Data preparation and scraping
dataprep = ["scrapfly-sdk==0.8.23", "python-dotenv==1.0.1", "backoff==2.2.0"]

# Visualization and plotting
visualization = ["matplotlib==3.10.3", "seaborn==0.13.2"]

# Development tools
development = ["ipython==9.2.0"]

# Standard production deployment (most common features including SQL agent support)
standard = ["ingenious[core,auth,ai,database]"]

# Azure cloud deployment with full integration
azure-full = ["ingenious[core,auth,azure,ai,database,ui]"]

# Knowledge base and ML features
knowledge-base = ["ingenious[core,ai,ml]"]

# Full feature set
full = [
  "ingenious[core,auth,azure,ai,database,ui,document-processing,ml,dataprep,visualization]",
]

[build-system]
requires = ["hatchling>=1.26"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["ingenious/", "README.md", "LICENSE"]

[tool.hatch.build.targets.wheel]
packages = ["ingenious"]

[project.scripts]
ingen = "ingenious.cli:app"

[tool.ruff.lint]
extend-select = ["I"]
ignore = ["E402"]

[tool.mypy]
# Global mypy configuration
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
color_output = true

# Strict mode settings
strict = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Exclude test_dir and its subdirectories from type checking
exclude = ["test_dir/.*"]

# Plugins
plugins = ["pydantic.mypy"]

# Per-module options for third-party packages that lack stubs
[[tool.mypy.overrides]]
module = [
  "autogen.*",
  "structlog.*",
  "scrapfly.*",
  "pymupdf.*",
  "fitz.*",
  "unstructured.*",
  "chromadb.*",
  "azure.*",
  "azure_storage.*",
  "azure_cosmos.*",
  "docx.*",
  "python_docx.*",
  "openpyxl.*",
  "xlsxwriter.*",
  "pandas_stubs.*",
  "markdown.*",
  "jinja2.*",
  "uvicorn.*",
  "typer.*",
  "typer.testing.*",
  "pydantic_settings.*",
  "dotenv.*",
  "jose.*",
  "passlib.*",
  "scrapfly.*",
  "requests.*",
  "pdfminer.*",
  "dependency_injector.*",
  "backoff.*",
  "jsonpickle.*",
  "scripts.*",
  "pyodbc.*",
  "colorlog.*",
]
ignore_missing_imports = true

# Allow some flexibility during initial migration
[[tool.mypy.overrides]]
module = [
  "ingenious.external_services.*",
  "ingenious.dataprep.*",
  "ingenious.document_processing.*",
  "ingenious.ingenious_extensions_template.*",
  "ingenious.services.chat_services.multi_agent.conversation_flows.*",
  "ingenious.services.chat_services.multi_agent.conversation_patterns.*",
  "ingenious.models.ag_agents.*",
  "ingenious.services.knowledge_base.*",
  "ingenious.services.file_summarization.*",
  "ingenious.services.chat_services.llm.*",
  "ingenious.services.chat_services.multi_agent.*",
  "ingenious.services.sql_agent.*",
  "ingenious.utils.*",
  "ingenious.models.ca_raw_fixture_data.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_return_any = false
no_implicit_optional = false
ignore_errors = true

# Allow flexibility in tests
[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
# Relax mypy only for the *library-internal* test package
module = ["ingenious.chunk.tests.*"]
ignore_errors = true
disallow_untyped_defs = false        # donâ€™t require -> None, param hints, etc.
ignore_missing_imports = true        # silence missing stubs (e.g. `regex`)
check_untyped_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "-v",
  "--tb=short",
  "--strict-markers",
  "--strict-config",
  "--cov=ingenious",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-fail-under=20",
  "-p",
  "no:doctest",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
  "unit: Unit tests (no external dependencies)",
  "integration: Integration tests (internal components only)",
  "slow: Slow-running tests",
  "requires_env: Tests that require specific environment variables",
  "e2e: live network integration test (requires external APIs)",
  "docs: tests that parse large documents or require extra dependencies",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
  "ignore:.*(SwigPy|swigvarlink).* has no __module__ attribute:DeprecationWarning",
]

[tool.uv.workspace]
members = ["test_dir"]
